//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vocabulary_entries")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub entry_id: i32,
    #[sea_orm(column_type = "Text")]
    pub word: String,
    #[sea_orm(column_type = "Text")]
    pub part_of_speech: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub english: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub meaning: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub examples: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub themes: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub source_table: String,
    pub source_created_time: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub extra: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::flashcard_progress::Entity")]
    FlashcardProgress,
    #[sea_orm(has_many = "super::flashcard_reviews::Entity")]
    FlashcardReviews,
}

impl Related<super::flashcard_progress::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlashcardProgress.def()
    }
}

impl Related<super::flashcard_reviews::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlashcardReviews.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
